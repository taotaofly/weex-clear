<we-element name="collection">
  <template>
    <div>
      <div id="J_top_item" class="item top-item" style="display:none;">
        <div class="slider top-slider">
          <div class="inner">
            <text id="J_top_title" class="title">Pull to Create List</text>
            <text id="J_top_count" class="count">0</text>
          </div>
        </div>
      </div>
      <div if="{{newItemState}}" class="item edit">
        <div class="slider top-slider">
          <div class="inner" style="flex-direction:row;align-items:center;">
            <input id="J_item_input" class="input" />
          </div>
        </div>
      </div>
      <div class="item {{!items.length ? 'empty' : ''}}" repeat="{{collection}}" style="opacity:{{newItemState?0.15:1}}">
        <div class="slider">
          <div class="inner">
            <text class="title">{{name}}</text>
            <text class="count">{{items.length}}</text>
          </div>
        </div>
      </div>
    </div>
  </template>

  <style>
    .item {
      height: 65;
      line-height: 65;

      color: #fff;
      font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
      font-weight: bold;

      -webkit-transform-origin: center center;
      transform-origin: center center;
    }

    .slider {
      height: 65;
      background-color: #1780F7;
      position: relative;
      z-index: 1;
    }

    .inner {
      height: 65;

      border-top: 1px solid rgba(255, 255, 255, 0.07);
      border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }
    .title {
      position: absolute;
      top: 0;
      left: 12;
      font-size: 20;
    }

    .count {
      position: absolute;
      width: 65;
      height: 65;

      right: 0;
      top: -1px;
      background-color: rgba(255, 255, 255, 0.15);
      text-align: center;
      font-size: 20;
    }

    .shade {
      opacity: .15;
    }
    .empty {
      color: rgba(255, 255, 255, 0.5);
      text-shadow: 0 1px 1px rgba(0, 0, 0, 0.13);
    }
    .edit {
      position: absolute;
      left: 0;
      top: 0;
      right: 0;
      height: 65;
      z-index: 3;
      opacity: 1;
    }

    .input {
      width:750;
      padding-left:20;
      height:50;
      line-height:50;
      font-size:20;
      color:#fff;
      font-weight:bold;
      background-color:#1780F7;
      outline:none;
      border:none;
    }

    .top-item {
      position: absolute;
      left: 0;
      top: -65;
      right: 0;
      z-index: 2;
      text-shadow: 0 1px 1px;

      -webkit-perspective: 400;
      -webkit-perspective-origin: bottom center;
      perspective-origin: bottom center;
      -webkit-transition: -webkit-transform opacity 0.15s ease
      transition: transform opacity 0.15s ease;
    }

    .top-slider {
      -webkit-transform-origin: bottom center;
      transform-origin: bottom center;
    }

  </style>

  <script>
    module.exports = {
      data: {
        newItemState: null,
        collection: null
      },
      ready: function() {
        console.log('collection combo ready');
      }
    }
  </script>

</we-element>

<template>
  <list id="J_wrapper" class="wrapper" onscroll="scroll" onscrollend="scrollend" ontap="tap">
    <collection id="J_collection" collection="{{collections}}" new-item-state="{{newItemState}}"></collection>
  </list>
</template>

<style>
  .wrapper {
    position: absolute;
    width: 100%;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background: #000;
    overflow: hidden;
  }
</style>

<script>
var env = require('./include/env');
var pullingDown;
var pastPullDownThreshold;
var triggerNewItemState;

module.exports = {
  data: {
    newItemState: null,
    collections: [{
      name: 'How to Use',
      items: [{
        name: 'Swipe to the right to complete'
      }, {
        name: 'Swipe to the left to delete'
      }, {
        name: 'Tap and hold to pick me up'
      }, {
        name: 'Pull down to create an item'
      }, {
        name: 'Pull down more to go back'
      }, {
        name: 'Pull up to clear'
      }]
    }, {
      name: 'This is a Demo',
      items: []
    }, {
      name: 'Test',
      items: []
    }, {
      name: 'This is a Demo',
      items: []
    }, {
      name: 'Test',
      items: []
    }]
  },
  methods: {
    tap(e) {
      console.log(e, this._itemInputEl);
      if (triggerNewItemState) {
        this.newItemState = triggerNewItemState = null;
      }
    },
    scroll(e) {
      if (e.scrollTop < 0) {
        if (!pullingDown) {
          pullingDown = true;
          this._topItemEl.setStyle('display', 'block');
        }
        var displacementY = Math.abs(e.scrollTop);
        if (displacementY <= env.itemH) {
          if (pastPullDownThreshold) {
            pastPullDownThreshold = false;
            this._topTitleEl.setAttr('value', 'Pull to create List');
          }
          var pct = displacementY / env.itemH;
          var r = Math.max(0, (1 - pct) * 90);
          var slider = this._topItemEl.children[0];
          slider.setStyle(env.transformProperty, 'rotateX(' + r + 'deg)');
          slider.setStyle('opacity', pct / 2 + .5);
        } else {
          pastPullDownThreshold = true;
          triggerNewItemState = true;
          this._topTitleEl.setAttr('value', 'Release to Create List');
        }
      }

    },
    scrollend(e) {
      if (pullingDown) {
        pullingDown = false;
        this._topItemEl.setStyle('display', 'none');
      }
      if (triggerNewItemState) {
        // 设置阴影效果
        this.newItemState = true;
      }
    }
  },
  ready() {
    this._collectionVm = this.$vm('J_collection');
    this._topItemEl = this._collectionVm.$el('J_top_item');
    this._topTitleEl = this._collectionVm.$el('J_top_title');
    this._itemInputEl = this._collectionVm.$el('J_item_input');
    console.log('index ready', this._topItemEl);
  }
};
</script>
